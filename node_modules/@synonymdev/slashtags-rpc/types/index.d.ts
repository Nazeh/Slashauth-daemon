/// <reference path="../../../declarations.d.ts" />
/// <reference types="node" />
export class SlashtagsRPC extends EventEmitter {
    /** @param {Slashtag} [slashtag] */
    constructor(slashtag?: import("@synonymdev/slashtag").Slashtag | undefined);
    slashtag: import("@synonymdev/slashtag").Slashtag | undefined;
    /**
     * RPC Identifier
     * @type {string}
     */
    get id(): string;
    /**
     * Default value encoding for requests and responses
     * @type {import ('compact-encoding').Encoding | undefined}
     */
    get valueEncoding(): import("compact-encoding").Encoding | undefined;
    /**
     * Handshake value encoding
     * @type {import ('compact-encoding').Encoding | undefined }
     */
    get handshakeEncoding(): import("compact-encoding").Encoding | undefined;
    /**
     * Return a Handshake sent on channel opening.
     * @param {SecretStream} stream
     * @returns {any}
     */
    handshake(stream: SecretStream): any;
    /**
     * Callback function on opening a channel
     * @param {any} handshake
     * @param {SecretStream} socket
     */
    onopen(handshake: any, socket: SecretStream): void;
    /**
     * RPC methods
     * @type {RPCMethod[]}
     */
    get methods(): RPCMethod[];
    /**
     * Create a new RPC instance on the stream if doesn't already exist
     * @param {SecretStream} stream
     * @returns {ProtomuxRPC}
     */
    setup(stream: SecretStream): ProtomuxRPC;
    /**
     * Connect to a peer if not already connected, and return Protomux RPC instance.
     * @param {Parameters<Slashtag['connect']>[0]} key
     * @returns {Promise<ProtomuxRPC | undefined>}
     */
    rpc(key: Parameters<Slashtag['connect']>[0]): Promise<ProtomuxRPC | undefined>;
}
export default SlashtagsRPC;
export type RPCMethod = {
    name: string;
    options?: ProtomuxRPC.methodOpts | undefined;
    handler: (req: any, socket: SecretStream) => any;
};
export type Slashtag = import('@synonymdev/slashtag').Slashtag;
export type SecretStream = import('@hyperswarm/secret-stream');
import EventEmitter from "events";
import ProtomuxRPC from "protomux-rpc";
//# sourceMappingURL=index.d.ts.map