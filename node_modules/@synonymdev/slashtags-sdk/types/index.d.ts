/// <reference path="../../../declarations.d.ts" />
/// <reference types="node" />
export class SDK extends EventEmitter {
    /**
     *
     * @param {object} opts
     * @param {any} [opts.storage]
     * @param {Uint8Array} [opts.primaryKey]
     * @param {string | WebSocket} [opts.relay]
     * @param {import('@hyperswarm/dht').Node[]} [opts.bootstrap]
     */
    constructor(opts?: {
        storage?: any;
        primaryKey?: Uint8Array | undefined;
        relay?: string | WebSocket | undefined;
        bootstrap?: DHT.Node[] | undefined;
    });
    storage: any;
    primaryKey: Uint8Array;
    corestore: Corestore;
    _relaySocket: WebSocket | undefined;
    dht: DHT;
    swarm: Hyperswarm;
    /** @type {HashMap<Slashtag>} */
    slashtags: HashMap<Slashtag>;
    ready(): Promise<void>;
    /**
     * Corestore is closed
     * cannot create new writable or readable drives
     */
    get closed(): Promise<any> | undefined;
    /**
     * Swarm destroyed
     * cannot join, announce or lookup any drives on the DHT
     */
    get destroyed(): boolean | undefined;
    /**
     * Generates a Slashtag keypair from a `name`, and the internal `primaryKey`.
     * @param {string} [name]
     */
    createKeyPair(name?: string | undefined): import("hypercore").KeyPair;
    /**
     * Creates a Slashtag by name.
     * @param {string} [name] utf8 encoded string
     * @throws {Error} throws an error if the SDK or its corestore is closing
     */
    slashtag(name?: string | undefined): Slashtag;
    /**
     * Creates a Hyperdrive and announce the SDK's swarm as a client looking up for peers for it.
     * @param {Uint8Array} key
     * @param {object} [opts]
     * @param {Uint8Array} [opts.encryptionKey]
     * @throws {Error} throws an error if the SDK or its corestore is closing
     */
    drive(key: Uint8Array, opts?: {
        encryptionKey?: Uint8Array | undefined;
    } | undefined): Hyperdrive;
    /**
     * @type {import("hyperswarm")['join']}
     * @returns {import('hyperswarm').Discovery | undefined}
     *
     * Returns discovery object or undefined if the swarm is destroyed
     * */
    join(topic: Uint8Array | undefined, opts?: {
        server?: boolean | undefined;
        client?: boolean | undefined;
    } | undefined): import('hyperswarm').Discovery | undefined;
    /** Close corestore and destroy swarm and dht node */
    close(): Promise<void>;
    _closing: Promise<void> | undefined;
    _close(): Promise<void>;
}
export default SDK;
import EventEmitter from "events";
import Corestore from "corestore";
import WebSocket from "ws";
import DHT from "@hyperswarm/dht";
import Hyperswarm from "hyperswarm";
import HashMap from "turbo-hash-map";
import Slashtag from "@synonymdev/slashtag";
import Hyperdrive from "hyperdrive";
import * as constants from "./lib/constants.js";
import * as SlashURL from "@synonymdev/slashtags-url";
export { constants, SlashURL, Slashtag, Hyperdrive };
//# sourceMappingURL=index.d.ts.map