/// <reference path="../../../declarations.d.ts" />
export class Drivestore {
    /**
     * @param {import('corestore')} corestore
     * @param {import('@hyperswarm/dht').KeyPair} keyPair
     */
    constructor(corestore: import('corestore'), keyPair: import('@hyperswarm/dht').KeyPair);
    fava: number;
    keyPair: import("@hyperswarm/dht").KeyPair;
    /** @type {import('corestore')} */
    corestore: import('corestore');
    _metadata: Hyperbee;
    _drives: Hyperbee;
    _opening: Promise<any>;
    get closed(): Promise<any> | null;
    _open(): Promise<void>;
    opened: boolean | undefined;
    ready(): Promise<any>;
    /** @param {Parameters<import('corestore')['replicate']>} args */
    replicate(socket: Duplex, opts?: any): any;
    /**
     * Get a Hyperdrive by its name.
     */
    get(name?: string): Hyperdrive;
    /**
     * Set the correct and current key and encryption Key (enables future key rotation)
     * @param {Parameters<import('corestore')['get']>[0]} opts
     * @param {*} preload orginal ns._preload
     * @param {import('corestore')} ns
     * @param {string} name
     * @returns {Promise<any>}
     */
    _preload(opts: Parameters<import('corestore')['get']>[0], preload: any, ns: import('corestore'), name: string): Promise<any>;
    /** @returns {import('hyperbee').Iterator<{name: string}>} */
    [Symbol.asyncIterator](): import('hyperbee').Iterator<{
        name: string;
    }>;
}
export default Drivestore;
import Hyperbee from "hyperbee";
import Hyperdrive from "hyperdrive";
//# sourceMappingURL=index.d.ts.map