/// <reference path="../../../declarations.d.ts" />
/// <reference types="node" />
export class Slashtag extends EventEmitter {
    /**
     * @param {object} [opts]
     * @param {import('corestore')} [opts.corestore]
     * @param {import('@hyperswarm/dht')} [opts.dht]
     * @param {import('@hyperswarm/dht').KeyPair} [opts.keyPair]
     * @param {import('@hyperswarm/dht').Node[]} [opts.bootstrap]
     */
    constructor(opts?: {
        corestore?: Corestore | undefined;
        dht?: DHT | undefined;
        keyPair?: DHT.KeyPair | undefined;
        bootstrap?: DHT.Node[] | undefined;
    } | undefined);
    keyPair: DHT.KeyPair;
    key: Uint8Array;
    id: string;
    url: string;
    dht: DHT;
    server: DHT.Server;
    /** @type {HashMap<SecretStream>} */
    sockets: HashMap<SecretStream>;
    drivestore: Drivestore;
    /** @type {Emitter['on']} */ on: Emitter['on'];
    /** @type {Emitter['on']} */ once: Emitter['on'];
    /** @type {Emitter['on']} */ off: Emitter['on'];
    /** Listen for incoming connections on Slashtag's KeyPair */
    listen(): true | Promise<void>;
    listening: boolean | Promise<void> | undefined;
    /** Stop listening for incoming connections on Slashtag's KeyPair */
    unlisten(): Promise<void>;
    /**
     * Connect to a remote Slashtag by its key, z-base-32 id, or `slash:` url.
     * @param {Uint8Array | string} key
     * @returns {SecretStream}
     */
    connect(key: Uint8Array | string): SecretStream;
    close(): Promise<void>;
    _closing: Promise<void> | undefined;
    _close(): Promise<void>;
    closed: boolean | undefined;
    /**
     * @param {SecretStream} socket
     */
    _handleConnection(socket: SecretStream): {
        publicKey: Uint8Array;
        remotePublicKey: Uint8Array;
        handshakeHash: Uint8Array;
        opened: Promise<boolean>;
        destroy(): Promise<any>;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
}
export default Slashtag;
export type Emitter = import('./lib/interfaces').Emitter;
export type SecretStream = import('@hyperswarm/secret-stream');
import EventEmitter from "events";
import DHT from "@hyperswarm/dht";
import HashMap from "turbo-hash-map";
import Drivestore from "@synonymdev/slashdrive";
//# sourceMappingURL=index.d.ts.map